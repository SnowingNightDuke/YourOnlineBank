<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">Kogito 1.12.0 released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/jCSVrBT_zuY/kogito-1-12-0-released.html" /><author><name>Cristiano Nicolai</name></author><id>https://blog.kie.org/2021/10/kogito-1-12-0-released.html</id><updated>2021-10-26T00:48:26Z</updated><content type="html">We are glad to announce that the Kogito 1.12.0 release is now available! This goes hand in hand with, , Operator, and CLI 1.12.0 release. From a feature point of view, we included a series of new features and bug fixes, including: * Improvement in protobuf persistence generation: support for fields inherited from parent classes and ability to disable protobuf generation * Ability to create custom REST endpoints using Kogito incubator API * Data Index service new Gateway API methods for handling process instances, human tasks and jobs * JDBC persistence addon now has been tested with Oracle and should work with any ANSI SQL compatible storage (thanks for the contribution) * Kogito event driven DRL: ability to trigger DRL evaluation via CloudEvent Kafka messages * Kogito event driven PMML: ability to trigger PMML evaluation via CloudEvent Kafka messages * Support for FEEL expression in BPMN Gateways * Added BPMN validations around data input and and output types where they should match the expected type from the target/source process variable. BREAKING CHANGES * Operator OLM installation, today we support OwnNamespace and SingleNamespace install modes, however, when using OLM, AllNamesapces mode will be used.  For more details head to the complete. All artifacts are available now: * Kogito runtime artifacts are available on Maven Central. * Kogito examples can be found. * Kogito images are available on. * Kogito operator is available in the in OpenShift and Kubernetes. * Kogito tooling 0.13.0 artifacts are available at the. A detailed changelog for 1.12.0 can be found in. New to Kogito? Check out our website. Click the "Get Started" button. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/jCSVrBT_zuY" height="1" width="1" alt=""/&gt;</content><dc:creator>Cristiano Nicolai</dc:creator><feedburner:origLink>https://blog.kie.org/2021/10/kogito-1-12-0-released.html</feedburner:origLink></entry><entry><title type="html">What's new in Vert.x 4.1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/URg6OKCDNRc/whats-new-in-vert-x-4-2" /><author><name>Julien Viet</name></author><id>https://vertx.io/blog/whats-new-in-vert-x-4-2</id><updated>2021-10-26T00:00:00Z</updated><content type="html">See an overview of all new and exciting features in Vert.x 4.2, including Java 17 supports, Vert.x Oracle Client and more.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/URg6OKCDNRc" height="1" width="1" alt=""/&gt;</content><dc:creator>Julien Viet</dc:creator><feedburner:origLink>https://vertx.io/blog/whats-new-in-vert-x-4-2</feedburner:origLink></entry><entry><title type="html">Secure WildFly applications with OpenID Connect</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AeRoyUibUok/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/jbossas/jboss-security/secure-wildfly-applications-with-openid-connect/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=secure-wildfly-applications-with-openid-connect</id><updated>2021-10-25T10:41:56Z</updated><content type="html">WildFly 25 enables you to secure deployments using OpenID Connect (OIDC) without installing a Keycloak client adapter. This tutorial will show a proof of concept example of it. OpenID Connect is a simple identity layer on top of the OAuth 2.0 protocol which allows Clients to verify the identity of the End-User based on the ... The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AeRoyUibUok" height="1" width="1" alt=""/&gt;</content><dc:creator>F.Marchioni</dc:creator><feedburner:origLink>http://www.mastertheboss.com/jbossas/jboss-security/secure-wildfly-applications-with-openid-connect/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=secure-wildfly-applications-with-openid-connect</feedburner:origLink></entry><entry><title>Quarkus Tools for IntelliJ 1.8.0 released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ox1gRJms-0U/" /><author><name>Jeff Maury (https://twitter.com/jeffmaury)</name></author><id>https://quarkus.io/blog/intellij-quarkus-tools-1.8.0/</id><updated>2021-10-25T00:00:00Z</updated><published>2021-10-25T00:00:00Z</published><summary type="html">We are very pleased to announce the 1.8.0 release of Quarkus Tools for IntelliJ. This release adds support for CodeLens for REST endpoints and enhances MicroProfile Fault Tolerance and Metrics supports. Codelens When editing a resource class while the current Quarkus application is running in development mode (./mvnw compile quarkus:dev...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ox1gRJms-0U" height="1" width="1" alt=""/&gt;</summary><dc:creator>Jeff Maury (https://twitter.com/jeffmaury)</dc:creator><dc:date>2021-10-25T00:00:00Z</dc:date><feedburner:origLink>
                https://quarkus.io/blog/intellij-quarkus-tools-1.8.0/
            </feedburner:origLink></entry><entry><title type="html">Developing applications with IntelliJ Idea and WildFly</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8JWt3amLBzI/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/eclipse/intellij-idea/developing-applications-with-intellij-idea-and-wildfly/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=developing-applications-with-intellij-idea-and-wildfly</id><updated>2021-10-22T12:47:04Z</updated><content type="html">IntelliJ IDEA is a popular choice for developing Enterprise applications featuring automatic Maven and Maven integration. In this tutorial we will learn how to integrate IntelliJ with WildFly or JBoss EAP. IntelliJ IDEA assumes that all development, debugging, and testing is done on your computer and then the code is deployed to a production environment. Let’s see ... The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8JWt3amLBzI" height="1" width="1" alt=""/&gt;</content><dc:creator>F.Marchioni</dc:creator><feedburner:origLink>http://www.mastertheboss.com/eclipse/intellij-idea/developing-applications-with-intellij-idea-and-wildfly/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=developing-applications-with-intellij-idea-and-wildfly</feedburner:origLink></entry><entry><title>Broadcasting from microservices on Kubernetes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/D7j6iKPQX1I/broadcasting-microservices-kubernetes" /><author><name>Ilan Pinto</name></author><id>af2fbbf3-db72-434f-b302-716c6c5f8a86</id><updated>2021-10-22T07:00:00Z</updated><published>2021-10-22T07:00:00Z</published><summary type="html">&lt;p&gt;In the era of cloud-based applications that divide tasks among multiple dedicated &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt;, it is crucial to be able to dispatch events and messaging to multiple clients. This article presents an efficient architecture for broadcasting from a service using a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; headless service.&lt;/p&gt; &lt;h2&gt;Why broadcasting is difficult&lt;/h2&gt; &lt;p&gt;Many cloud-native patterns rely on messaging to deliver data to multiple receivers. Examples of these patterns include:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/queue-based-load-leveling"&gt;Queue-based load leveling&lt;/a&gt;: Sets up a message queue as a buffer between a task and a service it invokes. The queue smooths out intermittent heavy loads that can cause the service to fail or the task to time out. Multiple services can subscribe to the queue to process data faster by doing it in parallel.&lt;/li&gt; &lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/async-request-reply"&gt;Asynchronous request-reply&lt;/a&gt;: Executes client requests asynchronously so that the clients can proceed to other tasks while waiting for a slow server to respond. This pattern often uses queue-based load leveling to process the requests.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Chats, DNS servers, and publication/subscription (pub/sub) applications are common examples where servers need to send messages to multiple consumers.&lt;/p&gt; &lt;p&gt;When high performance and low latency are critical, one might seek a messaging solution based on the User Datagram Protocol (UDP). One advantage of UDP is that it is much faster than Transmission Control Protocol (TCP), because UDP skips all the handshakes and doesn't establish a connection before sending data. The trade-off is that transfers are not guaranteed to succeed, and packets can arrive out of order.&lt;/p&gt; &lt;p&gt;A second advantage of UDP is that, while TCP by itself offers only unicast, other delivery options are built into UDP that allow delivery to a large number of clients on the same network (Figure 1):&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Multicast: Transmission to a defined group of hosts.&lt;/li&gt; &lt;li&gt;Broadcast: Transmission to all of the hosts on a network or subnet.&lt;/li&gt; &lt;/ul&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/broadcast.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/broadcast.png?itok=qXwIM-Pz" width="600" height="411" alt="Broadcasting delivers each packet to multiple recipients." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1. Broadcasting delivers each packet to multiple recipients. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;We could easily create a &lt;a href="https://developers.redhat.com/topics/python"&gt;Python&lt;/a&gt; client service that listens to the broadcast address using the &lt;code&gt;socket&lt;/code&gt; library:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt;from socket import * PORT = 36000 serverSocket = socket(AF_INET, SOCK_DGRAM,IPPROTO_UDP) # UDP serverSocket.setsockopt(SOL_SOCKET, SO_REUSEPORT, 1) # Enable broadcasting serverSocket.setsockopt(SOL_SOCKET,SO_BROADCAST,1) serverSocket.bind(('', PORT)) while True: data, addr = serverSocket.recvfrom(1024) print("received message:{}".format(data) )&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, allowing UDP broadcasting poses major network security risks, such as &lt;a href="https://www.jigsawacademy.com/blogs/cyber-security/udp-flooder/"&gt;UDP flooding&lt;/a&gt; and &lt;a href="https://www.sciencedirect.com/topics/computer-science/smurf-attack"&gt;Smurf attacks&lt;/a&gt;. Therefore, administrators often block broadcast addresses.&lt;/p&gt; &lt;p&gt;When UDP broadcasting is prohibited or you need to shift the responsibility to the sending application for another reason, this article offers another option.&lt;/p&gt; &lt;h2&gt;Headless services in Kubernetes&lt;/h2&gt; &lt;p&gt;Kubernetes offers a service component called &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services"&gt;headless services&lt;/a&gt;. When using a headless service, Kubernetes doesn’t allocate a dedicated cluster IP address or perform load balancing. Instead, all the pods that are assigned to the service are connected to the service. The pods' IP addresses are recorded in DNS as the service's A records. An &lt;code&gt;nslookup&lt;/code&gt; on the headless service returns all the pods' IP addresses with the corresponding selector.&lt;/p&gt; &lt;p&gt;Creating a headless service is pretty straightforward:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;apiVersion: v1 kind: Service metadata: name: headless-udp spec: selector: deployment: statefulset-udp-server clusterIP: None #headless service definition clusterIPs: - None type: ClusterIP ports: - protocol: UDP port: 12000 targetPort: 12000&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following example executes an &lt;code&gt;nslookup&lt;/code&gt; on the headless service from a pod on the same cluster, returning the bounded pod's IP address:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ nslookup headless-udp Server: 172.30.0.10 Address: 172.30.0.10#53 Name: headless-udp.ilpinto.svc.cluster.local Address: 10.128.5.80 Name: headless-udp.ilpinto.svc.cluster.local Address: 10.128.5.81&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Although the headless service does not explicitly implement load balancing, it effectively performs a simple round-robin load balancing. In the example just shown, every message sent to &lt;code&gt;headless-udp&lt;/code&gt; hostname is routed to the first IP address (10.128.5.80) unless its pod is down, in which case the message is sent to the second IP address (10.128.5.81).&lt;/p&gt; &lt;h2&gt;Broadcasting from the application&lt;/h2&gt; &lt;p&gt;Going back to our initial problem, we would like to broadcast a message in our Kubernetes or &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; cluster, but the broadcast address is blocked for security reasons. There is no option of turning on UDP broadcasting.&lt;/p&gt; &lt;p&gt;The solution presented here is to move the broadcasting responsibility from the network component to the application component: In our case, the service that is sending the data. Broadcasting can be simulated by providing the sending service with the IP addresses of the relevant pods that use the headless service.&lt;/p&gt; &lt;p&gt;The solution looks like this:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;In the Kubernetes/OpenShift cluster, you set up a headless service with a selector pointing to all the subscribed services.&lt;/li&gt; &lt;li&gt;Before sending the message, the sending service queries the headless service to get the pods' IP addresses.&lt;/li&gt; &lt;li&gt;The service sends the message to all the IP addresses. The broadcast uses UDP protocol-based messaging, so no response or acknowledgment is returned to the server.&lt;/li&gt; &lt;li&gt;Optionally, subscribed services can send their responses to a third service that writes the messages to a database (Figure 2). This step is important for stateful services. Using the third service prevents multiple database writes for the same state.&lt;/li&gt; &lt;/ul&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/db.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/db.png?itok=da5tgk-x" width="600" height="557" alt="When sending to multiple recipients, use a single database writer to preserve the messages." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2. Using a database writer to preserve the messages. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;When to use this solution&lt;/h2&gt; &lt;p&gt;The solution in this article should be used only when the following conditions are true:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The application can send out the same message multiple times, to improve chances of delivery in case the UDP-based messaging service drops a message. Messages are probably assigned numbers or other markers so that receivers can recognize and discard duplicates.&lt;/li&gt; &lt;li&gt;The microservices architecture is idempotent. All the pods processing the message at any given time should return the same result.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Resources&lt;/h2&gt; &lt;p&gt;Try out this broadcast solution using demo apps and YAML resources for deployment that I have put in my &lt;a href="https://github.com/ilan-pinto/udp-server"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/22/broadcasting-microservices-kubernetes" title="Broadcasting from microservices on Kubernetes"&gt;Broadcasting from microservices on Kubernetes&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/D7j6iKPQX1I" height="1" width="1" alt=""/&gt;</summary><dc:creator>Ilan Pinto</dc:creator><dc:date>2021-10-22T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/22/broadcasting-microservices-kubernetes</feedburner:origLink></entry><entry><title>Deploy a Java application using Helm, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/jAmUyWanu9w/deploy-java-application-using-helm-part-2" /><author><name>Daniel Oh</name></author><id>f993e7fb-e1f9-4530-b015-30e3b8f0a138</id><updated>2021-10-21T07:00:00Z</updated><published>2021-10-21T07:00:00Z</published><summary type="html">&lt;p&gt;In the &lt;a href="https://developers.redhat.com/articles/2021/10/19/deploy-java-application-using-helm-part-1"&gt;previous article&lt;/a&gt; in this series, you learned how to deploy &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; applications to &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP) using &lt;a href="https://developers.redhat.com/topics/helm/all"&gt;Helm&lt;/a&gt; on &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. Developers can use the procedures in Part 1 to easily stand up traditional Java application servers on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; with predefined Kubernetes manifestos.&lt;/p&gt; &lt;p&gt;What if you could have the same benefits when you develop &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; using JBoss EAP and Helm charts? JBoss EAP provides the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/red_hat_jboss_eap_xp_3.0.0_release_notes/index"&gt;Extension Pack&lt;/a&gt; (XP) to implement content trimming, packaging to a bootable JAR, and a &lt;a href="https://microprofile.io/"&gt;MicroProfile&lt;/a&gt; specification including fault tolerance, monitoring, and tracing in support of &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; in the cloud. This article explains how to make a bootable JAR using JBoss EAP XP and Helm and deploy the application to OpenShift.&lt;/p&gt; &lt;h2&gt;Build a bootable JAR with JBoss EAP XP and Helm&lt;/h2&gt; &lt;p&gt;You will use the same &lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts/tree/7.4.x/todo-backend"&gt;Todo backend application&lt;/a&gt; that you deployed in the previous article. At the end of the tutorial, you will have both a traditional enterprise Java application and a bootable JAR for lightweight and independent deployment such as a microservices architecture, using a JBoss EAP XP Helm chart as shown in Figure 1.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Helm charts for JBoss EAP 7.4 are a technology preview feature on OpenShift 4.8, so support is limited when you use these features in production environments.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/process_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/process_0.png?itok=p2Hh-qch" width="1440" height="670" alt="A diagram of the application development process using JBoss EAP, JBoss EAP XP, and a database." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1. Application development process using JBoss EAP, JBoss EAP XP, and a database. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;Installing a JBoss EAP XP Helm chart&lt;/h2&gt; &lt;p&gt;Go to the developer console in Red Hat OpenShift and navigate to the Topology view. You will add the same project (&lt;code&gt;eap-helm-demo&lt;/code&gt;) to OpenShift that you used in the &lt;a href="https://developers.redhat.com/articles/2021/10/19/deploy-java-application-using-helm-part-1#"&gt;previous article&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Click the &lt;strong&gt;Add to Project&lt;/strong&gt; icon on the left side and enter &lt;strong&gt;EAP&lt;/strong&gt; into the search box. Then select the &lt;strong&gt;Eap Xp3 v1.1.0&lt;/strong&gt; Helm chart and click &lt;strong&gt;Install Helm Chart&lt;/strong&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/add_1.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/add_1.png?itok=3iORJMwH" width="1440" height="737" alt="Adding the JBoss EAP XP Helm chart." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2. Adding the JBoss EAP XP Helm chart. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Now define a specific build, image, and deployment for a bootable Todo back-end application. Switch to the &lt;strong&gt;YAML view&lt;/strong&gt; to add build and deploy configurations, as shown in Figure 3. Use bootable JAR mode with the environment variables required for your &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; data source in your build. Also, set a single runtime using the &lt;code&gt;replicas&lt;/code&gt; field in the &lt;code&gt;deploy&lt;/code&gt; property:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;build: mode: bootable-jar env: - name: MAVEN_ARGS_APPEND value: -am -pl todo-backend -P bootable-jar-openshift - name: POSTGRESQL_DRIVER_VERSION value: '42.2.19' deploy: replicas: 1&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After you add the custom configuration in the YAML configuration, click on the &lt;strong&gt;Install&lt;/strong&gt; button. You can find the entire &lt;a href="https://github.com/jbossas/eap-charts/blob/main/examples/eap-xp3/todo-backend/todo-backend-bootable-jar.yaml"&gt;YAML configuration at the Todo back-end repository&lt;/a&gt;.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/bootable.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/bootable.png?itok=OIylWpW_" width="1404" height="1112" alt="Adding a bootable jar configurations." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3. Adding the bootable JAR configuration. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: You will probably see an &lt;strong&gt;ErrImagePull&lt;/strong&gt; or &lt;strong&gt;ImagePullBackOff&lt;/strong&gt; message in the resources, as shown in Figure 4. Don't worry—your bootable JAR is building successfully, but your deployment will report &lt;strong&gt;ErrImagePull&lt;/strong&gt; and &lt;strong&gt;ImagePullBackOff&lt;/strong&gt; until the build is complete.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/error_1.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/error_1.png?itok=FGh02ws9" width="1440" height="702" alt="ImagePullBackOff during deployment." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4. ImagePullBackOff during deployment. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Once the application build is complete, your image is automatically rolled out as shown in Figure 5. Create a connector between the JBoss EAP XP pod (Helm icon) and the PostgreSQL pod via the drag-and-drop feature in the Topology view.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/build_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/build_0.png?itok=eRXqkegX" width="1440" height="701" alt="Successful build and deployment for JBoss EAP XP application." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 5. Successful build and deployment of your JBoss EAP XP application. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;When you click on &lt;strong&gt;Open URL&lt;/strong&gt;, a new web page opens automatically. Copy the route URL for the next step.&lt;/p&gt; &lt;h2&gt;Testing the enterprise Java application&lt;/h2&gt; &lt;p&gt;When the deployment is complete, visit your &lt;a href="https://todobackend.com/client/"&gt;Todo front-end&lt;/a&gt; application by opening a new window in a web browser and pasting in the route URL you copied in the previous step. Then click on the &lt;strong&gt;go&lt;/strong&gt; button shown in Figure 6.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/front_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/front_0.png?itok=KMdjf6wz" width="1440" height="552" alt="To-do front-end GUI." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 6. Todo front-end GUI. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;Now you should be able to add, update, and remove items in the to-do list, as shown in Figure 7.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/list_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/list_0.png?itok=ZAbxRN1J" width="1318" height="706" alt="To-do list." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 7. To-do list. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;What’s next&lt;/h2&gt; &lt;p&gt;This tutorial has shown how to make a bootable JAR with enterprise capabilities (e.g., database transactions) and deploy it to the cloud on Red Hat OpenShift using the JBoss EAP XP Helm chart. You can also define custom runtime environments such as health checks (e.g., &lt;code&gt;livenessProbe&lt;/code&gt;, &lt;code&gt;readinessProbe&lt;/code&gt;) and TLS termination. Then you can upgrade and roll back an existing Helm chart, applying the changes to the running bootable application instantly.&lt;/p&gt; &lt;p&gt;Additional resources:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts/tree/xp-3.0.x"&gt;JBoss EAP XP 3.0.0 Quickstarts&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/using_jboss_eap_xp_3.0.0"&gt;Using MicroProfile with JBoss EAP XP 3.0.0&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/red_hat_jboss_eap_xp_3.0.0_release_notes"&gt;Red Hat JBoss EAP XP 3.0.0 Release Notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/getting_started_with_jboss_eap_for_openshift_container_platform"&gt;Getting Started with JBoss EAP for OpenShift Container Platform&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/21/deploy-java-application-using-helm-part-2" title="Deploy a Java application using Helm, Part 2"&gt;Deploy a Java application using Helm, Part 2&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/jAmUyWanu9w" height="1" width="1" alt=""/&gt;</summary><dc:creator>Daniel Oh</dc:creator><dc:date>2021-10-21T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/21/deploy-java-application-using-helm-part-2</feedburner:origLink></entry><entry><title type="html">This Week in JBoss - 21 October 2021</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/pnNEjGL-bLI/weekly-2021-10-21.html" /><category term="quarkus" /><category term="vscode" /><category term="java" /><category term="vertx" /><category term="wildfly" /><author><name>Jason Porter</name><uri>https://www.jboss.org/people/jason-porter</uri><email>do-not-reply@jboss.com</email></author><id>https://www.jboss.org/posts/weekly-2021-10-21.html</id><updated>2021-10-21T00:00:00Z</updated><content type="html">&lt;article class="" data-tags="quarkus, vscode, java, vertx, wildfly"&gt; &lt;h1&gt;This Week in JBoss - 21 October 2021&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Welcome back to another edition of the JBoss Editorial, a bi-weekly editorial containing information about JBoss and Red Hat related news and software!&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_release_roundup"&gt;Release roundup&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Once again, let’s thank everyone who has contributed to rolling out new releases over the past two weeks!&lt;/p&gt; &lt;div class="ulist square"&gt; &lt;ul class="square"&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2021/10/20/developer-workflows-using-vs-code-java-extension-10"&gt;vscode-java 1.0&lt;/a&gt; - Bringing Java 17 support to VS Code!&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2021/10/11/red-hat-software-collections-38-and-red-hat-developer-toolset-11-now-beta"&gt;Red Hat Software Collections 3.8&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://vertx.io/blog/eclipse-vertx-4-2-CR1-released/"&gt;Eclipse Vert.x 4.2.0.CR1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-3-1-final-released/"&gt;Quarkus 2.3.1.Final&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.wildfly.org//news/2021/10/12/WildFly-s2i-25-Released/"&gt;Wildfly 25 s2i images&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.wildfly.org//news/2021/10/12/bootable-jar-6.0.Final-Released/"&gt;Wildfly Bootable Jar 6.0&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://infinispan.org/blog/2021/10/12/infinispan-13-final"&gt;Infinispan 13.0.0.Final&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_wildfly"&gt;WildFly&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;This past week, the Wildfly Elytron team (a team specializing in server and client side security) participated in the &lt;a href="https://ghc.anitab.org/programs-and-awards/open-source-day/"&gt;Open Source Day&lt;/a&gt; hackathon. It is an all day hackathon celebrating Open Source technologies and allowing participants to learn about Open Source and contribute to projects designed to solve real world problems.&lt;/p&gt; &lt;p&gt;Issues in the Elytron issue tracker were triaged ahead of the event and new contributors were onboarded and taught about Git, creating and submitting pull requests, and how Open Source works. The event went well for the Elytron team with double the amount of PRs submitted than in the Summer Open Source Day!&lt;/p&gt; &lt;p&gt;We’d also like to mention that in Wildfly 25 support has been added for the MicroProfile Reactive Messaging 2.0. More information and a sample application can be found within &lt;a href="https://www.wildfly.org//news/2021/10/14/MicroProfile-Reactive-Messaging-2.0-in-WildFly-25/"&gt;the announcement&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_quarkus_videos"&gt;Quarkus Videos&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;The Quarkus team has been busy in front of the camera these last two weeks! Six videos have come out, including a new Quarkus Insights. These videos cover remote development, the DevCLI, DevUI, DevServices, and continuous testing. Most of these are under five minutes, why not watch them all?&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5FRcQ9lUhRo"&gt;Quarkus RemoteDevelopment&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1hTMyTiiNO4"&gt;QuarkusDevCLI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=XKsr6cX3qT4"&gt;Quarkus DevServices&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OQWalmv72Nc"&gt;Quarkus DevUI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5LbYbZpsbIg"&gt;Quarkus Continuous Testing&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=oY8TtKrC_5I"&gt;Quarkus Insights #67&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/jason-porter.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Jason Porter&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/pnNEjGL-bLI" height="1" width="1" alt=""/&gt;</content><dc:creator>Jason Porter</dc:creator><feedburner:origLink>https://www.jboss.org/posts/weekly-2021-10-21.html</feedburner:origLink></entry><entry><title>Developer workflows using the VS Code for Java extension 1.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/t7S_bSkcRPU/developer-workflows-using-vs-code-java-extension-10" /><author><name>Mohit Suman, Roland Grunberg</name></author><id>ae98b290-6832-4b18-8de8-c628131aae60</id><updated>2021-10-20T13:00:00Z</updated><published>2021-10-20T13:00:00Z</published><summary type="html">&lt;p&gt;The 1.0 release of &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.java"&gt;Language Support for Java by Red Hat&lt;/a&gt; on Visual Studio Code is now available on VS Code Marketplace. We'd like to take the opportunity to showcase a few workflows that really make it enjoyable to develop &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; applications in Visual Studio Code (VS Code).&lt;/p&gt; &lt;h2&gt;vscode-java 1.0: The one with Java 17&lt;/h2&gt; &lt;p&gt;The extension's 1.0 release supports workflows with Java 17. Released a few weeks ago, Java 17 marks a major point of change in the Java community as many organizations migrate to the latest Java runtime. Here is a short demo around the workflow using the Java extension and Java 17 support:&lt;/p&gt; &lt;div class="video-embed-field-provider-youtube video-embed-field-responsive-video"&gt; &lt;/div&gt; &lt;p&gt;One of the advantages of the &lt;code&gt;vscode-java&lt;/code&gt; extension is that all it takes to start coding is a simple Java source file. There's no need for fancy IDE-specific config files or even build files (such as &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;build.gradle&lt;/code&gt;) to get a project started.&lt;/p&gt; &lt;p&gt;Let's take an in-depth tour of the Java extension's new features.&lt;/p&gt; &lt;h2&gt;Configuring your Java project&lt;/h2&gt; &lt;p&gt;First, we'll begin by opening VS Code in a folder with just a few Java source files, as shown in Figure 1.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/load-project.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/load-project.png?itok=LwH2ja-7" width="1027" height="702" alt="A screenshot of the project loaded in VS Code." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 1. Loading the project in VS Code.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class="Indent1"&gt;&lt;strong&gt;Note:&lt;/strong&gt; One point worth repeating is that we support pretty much any Java runtime for which we can detect a compatible JDK.&lt;/p&gt; &lt;p&gt;As Figure 2 shows, we have configured Java 8, 11, and 17 environments by providing paths to a compatible JDK installation. Although in this example we have set Java 17 as the default for unmanaged projects, you can easily switch to Java 8 by setting it to &lt;code&gt;default: true&lt;/code&gt;. Once saved, the configuration will take effect. Maven or Gradle projects will have this configured in their build files; &lt;code&gt;vscode-java&lt;/code&gt; can detect and honor those settings.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/java-configuration-runtimes.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/java-configuration-runtimes.gif" width="1024" height="700" alt="An animated graphic showing various Java configuration runtimes." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 2. Java configuration runtimes.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;With a variety of different code actions, it's very easy to quickly get some boilerplate code. You can generate source headers with &lt;code&gt;java.templates.fileHeader&lt;/code&gt; (&lt;strong&gt;File → Preferences → Settings&lt;/strong&gt;), and getters/setters can be auto-generated through code completion. They can also be auto-generated via code actions on the individual fields or class itself, as shown in Figure 3.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/create-class-generate-getset.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/create-class-generate-getset.gif" width="1024" height="700" alt="create-class-generate-getset" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 3. Creating the ​​class to auto-generate getters/setters.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Access references for unnmanaged projects&lt;/h3&gt; &lt;p&gt;Having access to the sources of the libraries you're using is important. While we've always supported this for managed projects (e.g., Maven or Gradle), we now support it for unmanaged projects as well. Simply reference a library from Maven Central, and the sources will be available automatically when interacting with some reference from that library, as shown in Figure 4.&lt;/p&gt; &lt;p&gt;If you want a little more control over your unmanaged project's dependencies, but don’t want to transition to using some build tool, you can use &lt;code&gt;java.project.referencedLibraries&lt;/code&gt; (&lt;strong&gt;File → Preferences → Settings&lt;/strong&gt;). To jump to a particular method definition, you can use the right-click context menu or configure a keyboard shortcut (e.g., the F12 key).&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/source-lookup.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/source-lookup.gif" width="1024" height="700" alt="source-lookup" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 4. Source lookup.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Search for methods&lt;/h3&gt; &lt;p&gt;It's handy to be able to search for your method declarations the same way you might search for a file, especially when you're dealing with a new project or file structure. Rather than searching for a file that has the method we're interested in, we can search for the method directly. Simply enable &lt;code&gt;java.symbols.includeSourceMethodDeclarations&lt;/code&gt; (&lt;strong&gt;File → Preferences → Settings&lt;/strong&gt;).&lt;/p&gt; &lt;h3&gt;Type hierarchy&lt;/h3&gt; &lt;p&gt;The Java extension also now supports type hierarchy. This feature is accessible from the right-click context menu, but you can also easily configure it as a keyboard shortcut, as shown as Figure 5.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/source-method-lookup-type-hierarchy.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/source-method-lookup-type-hierarchy.gif" width="1024" height="700" alt="source-method-lookup-type-hierarchy." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 5. Source method lookup type hierarchy.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Run and debug&lt;/h3&gt; &lt;p&gt;In order to take advantage of run and debug capabilities, you'll need to install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug"&gt;&lt;code&gt;vscode-java-debug&lt;/code&gt;&lt;/a&gt; extension from the Visual Studio Code Marketplace.&lt;/p&gt; &lt;p&gt;The Debugger for Java extension lets you run and debug the project in many different ways. For simple projects, you can enable &lt;code&gt;java.debug.settings.enableRunDebugCodeLens&lt;/code&gt; (&lt;strong&gt;File → Preferences → Settings&lt;/strong&gt;), and use CodeLens directly from the main method.&lt;/p&gt; &lt;p&gt;You can set breakpoints, inspect and modify variable values, and even interact with the program from the Debug Console, as shown in Figure 6.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/run-debug.gif"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/run-debug.gif" width="1024" height="700" alt="run-debug" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 6. Run and debug.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Future roadmap&lt;/h2&gt; &lt;p&gt;There are many items planned for the Java language support in VS Code. Some of these include:&lt;/p&gt; &lt;ul&gt;&lt;li aria-level="1"&gt;Making it easier to configure compiler error/warnings and code formatting options.&lt;/li&gt; &lt;li aria-level="1"&gt;Adding useful auto-completion features (such as Postfix completion).&lt;/li&gt; &lt;li aria-level="1"&gt;Continuing to adopt convenient code actions (new Java language features, for example) and eventually reach feature parity with those provided by the Eclipse Java IDE.&lt;/li&gt; &lt;li aria-level="1"&gt;Improving the language server's initial startup time and overall performance.&lt;/li&gt; &lt;li aria-level="1"&gt;Embedding a Java runtime to improve the "Getting Started" experience.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Testimonials&lt;/h2&gt; &lt;p&gt;"For me, VS Code for Java is the easiest way to get started with a Java project. It doesn't matter if you're starting from scratch or you need to quickly open an existing project—VSCode for Java is blazingly fast and small. It will work fast even on older machines, and it has all the features you need to be productive when developing Java projects, from old versions of Java up to the latest version: 17!"&lt;/p&gt; &lt;p class="Indent1"&gt;—Edson Yanaga, Java Champion and Microsoft MVP, Director of Developer Experience, Red Hat&lt;/p&gt; &lt;p&gt;"&lt;code&gt;vscode-java&lt;/code&gt; makes Visual Studio code a fast and lean way to edit Java projects. I can start and stop the editor on any project, small or large, in no time. This makes it a great tool to use as both my primary and secondary IDE while working on JBang and Quarkus projects."&lt;/p&gt; &lt;p class="Indent1"&gt;—Max Rydahl Andersen, Distinguished Engineer, Red Hat&lt;/p&gt; &lt;p&gt;"Visual Studio Code and its &lt;code&gt;vscode-java&lt;/code&gt; extension have become my go-to solution for a quick and lightweight code exploration and editing experience. Whether it's for examining pull requests, diving into a new code base, or a live demo during a conference talk, &lt;code&gt;vscode-java&lt;/code&gt; allows me to work with Java code intuitively and efficiently, providing all the goodies you'd expect from your coding workbench, like code navigation, refactoring support, instant feedback in case of failures, etc. Part of the VSCode extension pack for Java, &lt;code&gt;vscode-java&lt;/code&gt; integrates seamlessly with other extensions like the Java debugger and test runner, as well as features like remote development via SSH, making it an invaluable part of my Java toolbox."&lt;/p&gt; &lt;p class="Indent1"&gt;—Gunnar Morling, Java Champion, Principal Software Engineer, Red Hat&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;&lt;a href="https://github.com/redhat-developer/vscode-java#quick-start"&gt;Check out our Quick Start guide&lt;/a&gt; to get started building Java applications using Visual Studio Code. Obviously, 1.0.0 is not the endgame. Development continues, so you can look forward to more goodies—there's a big one coming in the near future.&lt;/p&gt; &lt;h3&gt;Give us your feedback&lt;/h3&gt; &lt;p&gt;We would love️ to hear what you think about the Java extension. As always, your feedback is critical to our product improvement.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Have a question? Start a discussion on &lt;a href="https://github.com/redhat-developer/vscode-java/discussions"&gt;GitHub Discussions&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;File a bug in &lt;a href="https://github.com/redhat-developer/vscode-java/issues"&gt;GitHub Issues&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Chat with us on &lt;a href="https://gitter.im/redhat-developer/vscode-java"&gt;Gitter&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Find us on Twitter at &lt;a href="https://twitter.com/VSCodeJava/"&gt;@VSCodeJava&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/20/developer-workflows-using-vs-code-java-extension-10" title="Developer workflows using the VS Code for Java extension 1.0"&gt;Developer workflows using the VS Code for Java extension 1.0&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/t7S_bSkcRPU" height="1" width="1" alt=""/&gt;</summary><dc:creator>Mohit Suman, Roland Grunberg</dc:creator><dc:date>2021-10-20T13:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/20/developer-workflows-using-vs-code-java-extension-10</feedburner:origLink></entry><entry><title>Multipath TCP on RHEL 8: From one to many subflows</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/kqc2959sKqk/multipath-tcp-rhel-8-one-many-subflows" /><author><name>Andrea Claudi</name></author><id>6424f1ed-b72a-4261-a3e1-a684dbe4f5b0</id><updated>2021-10-20T07:00:00Z</updated><published>2021-10-20T07:00:00Z</published><summary type="html">&lt;p&gt;Many years ago, Hercules was traveling back to Athens when he lost his way in a wood. Arriving at a crossroad, he found two women. One of them was Aletheia, the goddess of truth, and the other was Apate, the goddess of lies. But he didn't know who was who. Hercules needed all his intelligence to find the only question capable of revealing the way to Athens.&lt;/p&gt; &lt;p&gt;If you are lost in a computer network and don't know which path to take, don't worry—you don't need Hercules to find your way: You can use Multipath TCP.&lt;/p&gt; &lt;h2&gt;Multipath TCP in Red Hat Enterprise Linux 8&lt;/h2&gt; &lt;p&gt;Multipath TCP (MPTCP) is an extension to the Transmission Control Protocol (TCP) to &lt;a href="https://www.rfc-editor.org/info/rfc8684"&gt;use multiple paths between peers simultaneously&lt;/a&gt;. &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt;'s MPTCP implementation is fairly recent and was included in version 5.6. &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt; includes MPTCP starting with version 8.3.&lt;/p&gt; &lt;p&gt;In the &lt;a href="https://developers.redhat.com/blog/2020/08/19/multipath-tcp-on-red-hat-enterprise-linux-8-3-from-0-to-1-subflows"&gt;first part of this series&lt;/a&gt;, &lt;a&gt;Davide Caratti&lt;/a&gt; showed how to enable MPTCP, open an MPTPC socket in an application, and verify that MPTCP is working as expected. You can follow his tutorial to start experimenting with MPTCP.&lt;/p&gt; &lt;p&gt;In this article, you will learn how to:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Use &lt;code&gt;iproute2&lt;/code&gt; to add multiple subflows to an MPTCP connection.&lt;/li&gt; &lt;li&gt;Verify that MPTCP uses multiple subflows.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Opening an MPTCP socket&lt;/h2&gt; &lt;p&gt;To see MPTCP in action, you need to open an MPTCP socket from a user-space application. Let's follow the instructions from the &lt;a href="m/blog/2020/08/19/multipath-tcp-on-red-hat-enterprise-linux-8-3-from-0-to-1-subflows"&gt;first article of this series&lt;/a&gt; to set up a multiple subflow testbed.&lt;/p&gt; &lt;p&gt;First of all, because MPTCP is disabled in the default Red Hat Enterprise Linux configuration, you need to enable it using &lt;code&gt;sysctl&lt;/code&gt; so you can create MPTCP sockets:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# sysctl -w net.mptcp.enabled=1 # sysctl net.mptcp.enabled net.mptcp.enabled = 1&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;MPTCP sockets are the same as the regular TCP sockets and use the same semantics. An application can natively add support to MPTCP using a socket with &lt;code&gt;IPPROTO_MPTCP&lt;/code&gt; like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;fd = socket(AF_INET, SOCK_STREAM, IPPROTO_MPTCP);&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Implementing a full-fledged MPTCP application is not difficult, but what if you want to use a normal user-space application without any knowledge of &lt;code&gt;IPPROTO_MPTCP&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Fear not: There are multiple paths to avoid patching and rebuilding all networking applications. The easiest path is probably to use &lt;code&gt;systemtap&lt;/code&gt; to replace &lt;code&gt;IPPROTO_TCP&lt;/code&gt; with &lt;code&gt;IPPROTO_MPTCP&lt;/code&gt; in all the calls to &lt;code&gt;__sys_socket()&lt;/code&gt; in the kernel. To make the replacement, you need to install a few packages:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ dnf -y install \ kernel-headers \ kernel-devel \ kernel-debuginfo \ kernel-debuginfo-common-x86_64 \ systemtap-client \ systemtap-devel&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-multipath-tcp_configuring-and-managing-networking"&gt;download the &lt;code&gt;systemtap&lt;/code&gt; script from this guide&lt;/a&gt; and use the following command to start it:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# stap -vg mpctp.stap&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Verify that the &lt;code&gt;systemtap&lt;/code&gt; script is working by looking at the output from &lt;code&gt;dmesg&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# dmesg ... [1114254.601040] Kprobes globally unoptimized [1114254.611265] stap_d60b4bc4e0332aa247ebd9b2ffa597_213373: module_layout: kernel tainted. [1114254.620296] Disabling lock debugging due to kernel taint [1114254.626423] stap_d60b4bc4e0332aa247ebd9b2ffa597_213373: loading out-of-tree module taints kernel. [1114254.636597] stap_d60b4bc4e0332aa247ebd9b2ffa597_213373: module verification failed: signature and/or required key missing - tainting kernel [1114254.680368] stap_d60b4bc4e0332aa247ebd9b2ffa597_213373 (mptcp.stap): systemtap: 4.4/0.182, base: ffffffffc1082000, memory: 224data/32text/15ctx/24678net/202alloc kb, probes: 1&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Setting up the testbed&lt;/h2&gt; &lt;p&gt;As a simple test setup, we will use two network namespaces, &lt;code&gt;mptcp-client&lt;/code&gt; and &lt;code&gt;mptcp-server&lt;/code&gt;, to simulate the client and the server in an MPTCP connection. The two namespaces will be connected by two different virtual Ethernet (veth) paths: From 10.0.0.1 to 10.0.0.2 and from 192.168.0.1 to 192.168.0.2 (Figure 1).&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/setup.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/setup.png?itok=BSlJ5b7u" width="794" height="220" alt="Network topology for MPTCP two-stream test. In this setup, 10.0.0.1 on the server communicates with 10.0.0.2 on the client, and 192.168.0.1 on the server communicates with 192.168.0.2 on the client." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Network topology for two-path MPTCP test. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;You can use the following script to set up the testbed:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;#!/bin/sh ip netns add mptcp-client ip netns add mptcp-server sysctl -w net.ipv4.conf.all.rp_filter=0 ip netns exec mptcp-client sysctl -w net.mptcp.enabled=1 ip netns exec mptcp-server sysctl -w net.mptcp.enabled=1 ip link add red-client netns mptcp-client type veth peer red-server netns mptcp-server ip link add blue-client netns mptcp-client type veth peer blue-server netns mptcp-server ip -n mptcp-server address add 10.0.0.1/24 dev red-server ip -n mptcp-server address add 192.168.0.1/24 dev blue-server ip -n mptcp-client address add 10.0.0.2/24 dev red-client ip -n mptcp-client address add 192.168.0.2/24 dev blue-client ip -n mptcp-server link set red-server up ip -n mptcp-server link set blue-server up ip -n mptcp-client link set red-client up ip -n mptcp-client link set blue-client up&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can verify that your setup is working as expected by following the instructions &lt;a href="https://developers.redhat.com/blog/2020/08/19/multipath-tcp-on-red-hat-enterprise-linux-8-3-from-0-to-1-subflows"&gt;in the first part of this series&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Working with multiple paths&lt;/h2&gt; &lt;p&gt;Now that you have MPTCP working on a single path, it's time to take multiple paths.&lt;/p&gt; &lt;p&gt;First, instruct the kernel to set up multiple MPTCP subflows. &lt;code&gt;iproute2&lt;/code&gt; provides a handy &lt;code&gt;mptcp&lt;/code&gt; command that can help you:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# ip -n mptcp-server mptcp endpoint flush # ip -n mptcp-server mptcp limits set subflow 2 add_addr_accepted 2 # ip -n mptcp-client mptcp endpoint flush # ip -n mptcp-client mptcp limits set subflow 2 add_addr_accepted 2 # ip -n mptcp-client mptcp endpoint add 192.168.0.2 dev blue-client id 1 subflow&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These commands configure the MPTCP server to accept up to two different subflows and then add a second subflow to the client. To verify that everything is configured as expected, use &lt;code&gt;iproute2&lt;/code&gt; again:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# ip -n mptcp-server mptcp limit show add_addr_accepted 2 subflows 2 # ip -n mptcp-client mptcp limit show add_addr_accepted 2 subflows 2 # ip -n mptcp-client mptcp endpoint show 192.168.0.2 id 1 subflow dev blue-client&lt;/code&gt; &lt;/pre&gt; &lt;p&gt;Now you are ready to use subflows. To test them, you can use &lt;code&gt;ncat&lt;/code&gt;. The following command starts an &lt;code&gt;ncat&lt;/code&gt; server instance on the &lt;code&gt;mptcp-server&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;# ip netns exec mptcp-server ncat -k -4 -i 30 -c "sleep 60" -C -o /tmp/server -l 0.0.0.0 4321 &amp;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Next, the following command sends a "hello world!" message to the server from the &lt;code&gt;mptcp-client&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ip netns exec mptcp-client ncat -c "echo hello world!" 10.0.0.1 4321&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;code&gt;tcpdump&lt;/code&gt;, you can verify that there are two different three-way handshakes from different interfaces:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;# tcpdump --number -tnnr /tmp/mptcp.pcap reading from file /tmp/mptcp.pcap, link-type LINUX_SLL (Linux cooked v1) dropped privs to tcpdump 1  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [S], seq 908898843, win 29200, options [mss 1460,sackOK,TS val 3701631927 ecr 0,nop,wscale 7,mptcp capable[bad opt]&gt; 2  IP 10.0.0.1.4321 &gt; 10.0.0.2.43474: Flags [S.], seq 3314791626, ack 908898844, win 28960, options [mss 1460,sackOK,TS val 3198006599 ecr 3701631927,nop,wscale 7,mptcp capable Unknown Version (1)], length 0 3  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [.], ack 1, win 229, options [nop,nop,TS val 3701631927 ecr 3198006599,mptcp capable Unknown Version (1)], length 0 4  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [P.], seq 1:14, ack 1, win 229, options [nop,nop,TS val 3701631928 ecr 3198006599,mptcp capable[bad opt]&gt; 5  IP 10.0.0.1.4321 &gt; 10.0.0.2.43474: Flags [.], ack 14, win 227, options [nop,nop,TS val 3198006600 ecr 3701631928,mptcp dss ack 3158259848540329265], length 0 6  IP 192.168.0.2.36423 &gt; 10.0.0.1.4321: Flags [S], seq 2791202022, win 29200, options [mss 1460,sackOK,TS val 1604001975 ecr 0,nop,wscale 7,mptcp join id 1 token 0xc0715389 nonce 0xcae83dcb], length 0 7  IP 10.0.0.1.4321 &gt; 192.168.0.2.36423: Flags [S.], seq 637604674, ack 2791202023, win 28960, options [mss 1460,sackOK,TS val 511057212 ecr 1604001975,nop,wscale 7,mptcp join id 0 hmac 0x465e4bf08492bb0c nonce 0x47d18eca], length 0 8  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [.], ack 1, win 229, options [nop,nop,TS val 3701631928 ecr 3198006600,mptcp dss fin ack 641236127 seq 3158259848540329265 subseq 0 len 1,nop,nop], length 0 9  IP 10.0.0.1.4321 &gt; 10.0.0.2.43474: Flags [.], ack 14, win 227, options [nop,nop,TS val 3198006600 ecr 3701631928,mptcp dss ack 3158259848540329266], length 0 10  IP 10.0.0.2.43474 &gt; 10.0.0.1.4321: Flags [F.], seq 14, ack 1, win 229, options [nop,nop,TS val 3701631928 ecr 3198006600,mptcp dss ack 641236127], length 0 11  IP 10.0.0.1.4321 &gt; 10.0.0.2.43474: Flags [.], ack 15, win 227, options [nop,nop,TS val 3198006641 ecr 3701631928,mptcp dss ack 3158259848540329266], length 0&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Indeed, a first three-way handshake takes place with packets 1-3 on the 10.0.0.* path, while a second handshake kicks in with packets 6-8 on the 192.168.0.* path (note the S flag for SYN and the S. for SYN/ACK).&lt;/p&gt; &lt;h2&gt;Tired of manual subflows? mptcpd to the rescue&lt;/h2&gt; &lt;p&gt;By now you are probably tired of having to manually specify endpoints and subflows for each new test you want to do. Luckily, this is not the only way to use MPTCP endpoints.&lt;/p&gt; &lt;p&gt;Linux kernel version 5.11 is able to send &lt;code&gt;netlink&lt;/code&gt; notifications to user space when the kernel receives an &lt;code&gt;add address netlink&lt;/code&gt; command. A small user-space application, &lt;code&gt;mptpcd&lt;/code&gt;, can tap into these notifications to provide a path management mechanism to user space and control MPTCP behavior. &lt;code&gt;mptpcd&lt;/code&gt; will be available with RHEL 9.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In the end, Hercules managed to find his way to Athens by simply asking one of the goddesses which path the other goddess would tell him to use. He chose the other path and quickly returned to Athens.&lt;/p&gt; &lt;p&gt;With MPTCP, you don't need to solve path riddles anymore: You can ask for multiple roads and take them all together to head where you need to go.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/20/multipath-tcp-rhel-8-one-many-subflows" title="Multipath TCP on RHEL 8: From one to many subflows"&gt;Multipath TCP on RHEL 8: From one to many subflows&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/kqc2959sKqk" height="1" width="1" alt=""/&gt;</summary><dc:creator>Andrea Claudi</dc:creator><dc:date>2021-10-20T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/20/multipath-tcp-rhel-8-one-many-subflows</feedburner:origLink></entry></feed>
